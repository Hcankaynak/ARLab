using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.iOS;

public class Spawn : MonoBehaviour
{
    public GameObject tube;
    private Vector3 mOffset;
    public Transform trans;


    private float mZCoord;

    private Rigidbody rb;
    public float maxRayDistance = 30.0f;
    private bool holding;
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {

        

        var touch = Input.GetTouch(0);
        if(touch.phase == TouchPhase.Began)
        {

            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
            RaycastHit hit;

            //we'll try to hit one of the plane collider gameobjects that were generated by the plugin
            //effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent
            Debug.Log( Physics.Raycast(ray, out hit, maxRayDistance));
            Debug.Log("Raycast");
            if (Physics.Raycast(ray, out hit, maxRayDistance))
            {
                Debug.Log("Physics Raycast");
                if(hit.collider.tag == "Tube")
                {
                    /*
                     Debug.Log(Input.mousePosition.x);
                    Debug.Log(Input.mousePosition.y);
                    Debug.Log(Input.mousePosition.z);
                    Vector3 mousePosition = new Vector3(Input.mousePosition.x, hit.collider.transform.position.y, Input.mousePosition.z);
                    Vector3 objPosition = Camera.main.ScreenToWorldPoint(mousePosition);*/


                    Vector3 xxposition = new Vector3(hit.point.x, hit.collider.transform.position.y, hit.point.z);
                    hit.collider.transform.position = xxposition;
                    





                    Debug.Log("Collider");
                    
                }
                else
                {
                    Debug.Log(transform);
                    Debug.Log("Else",transform);
                    
                    GameObject go = Instantiate(tube,hit.point,transform.rotation);
                    
                }
                //we're going to get the position from the contact point
                /*
                 * m_HitTransform.position = hit.point;
                Debug.Log(string.Format("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));

                //and the rotation from the transform of the plane collider
                m_HitTransform.rotation = hit.transform.rotation;*/
            }
            
        }
    }

    void Move()
    {
        RaycastHit hit;
        Ray ray = Camera.main.ScreenPointToRay(Input.GetTouch(0).position);
        // The GameObject this script attached should be on layer "Surface"
        if (Physics.Raycast(ray, out hit, maxRayDistance))
        {
            transform.position += new Vector3(hit.point.x,
                                             transform.position.y,
                                             hit.point.z);
        }
    }
    void OnMouseDown()

    {

        mZCoord = Camera.main.WorldToScreenPoint(

            gameObject.transform.position).z;



        // Store offset = gameobject world pos - mouse world pos

        mOffset = gameObject.transform.position - GetMouseAsWorldPoint();

    }



    private Vector3 GetMouseAsWorldPoint()

    {

        // Pixel coordinates of mouse (x,y)

        Vector3 mousePoint = Input.mousePosition;



        // z coordinate of game object on screen

        mousePoint.z = mZCoord;



        // Convert it to world points

        return Camera.main.ScreenToWorldPoint(mousePoint);

    }



    void OnMouseDrag()

    {
        
        transform.position = GetMouseAsWorldPoint() + mOffset;

    }
    void OnMouseDragReal()
    {
        Vector3 mousePosition = new Vector3(Input.mousePosition.x, Input.mousePosition.y);
        Vector3 objPosition = Camera.main.ScreenToWorldPoint(mousePosition);

        transform.position = objPosition;
    }
}
